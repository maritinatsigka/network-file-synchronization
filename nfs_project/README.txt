Η παρούσα εργασία υλοποιεί ένα σύστημα συγχρονισμού αρχείων (NFS-like) βασισμένο σε αρχιτεκτονική client-server με υποστήριξη πολυνηματισμού (multithreading). Ο 
στόχος του συστήματος είναι η αυτόματη ή χειροκίνητη αντιγραφή αρχείων από έναν "source" client σε έναν "target" client, μέσω ενός ενδιάμεσου διαχειριστή (nfs_manager),
ο οποίος αναλαμβάνει τη δρομολόγηση των εργασιών και το συγχρονισμό των δεδομένων.


1. nfs_manager.c

Το αρχείο nfs_manager.c αποτελεί το κεντρικό εκτελέσιμο πρόγραμμα του συστήματος συγχρονισμού. Είναι υπεύθυνο για την αρχικοποίηση όλων των 
βασικών υποσυστημάτων και τη διαχείριση των worker threads. Το πρόγραμμα δέχεται παραμέτρους μέσω γραμμής εντολών, κάνει parsing αυτών των 
παραμέτρων και ξεκινά τη λειτουργία του συστήματος.

Κύρια Βήματα Λειτουργίας:
-Parsing των παραμέτρων: Η συνάρτηση parse_args() διαβάζει τα flags της γραμμής εντολών (π.χ. -l, -c, -n, -p, -b) και τα αποθηκεύει σε μια
δομή τύπου Config. Κάθε flag έχει προκαθορισμένο τύπο και σημασία:
    -l: Ορίζει το path του log αρχείου.
    -c: Ορίζει το αρχείο ρυθμίσεων (config file).
    -n: Πλήθος worker threads.
    -p: Πόρτα για σύνδεση της κονσόλας.
    -b: Μέγεθος buffer της ουράς εργασιών.
-Άνοιγμα Log Αρχείου: Το log_file ανοίγει σε λειτουργία εγγραφής. Αν αποτύχει, η εφαρμογή τερματίζεται.
-Εκτύπωση Banner: Η συνάρτηση print_banner() εμφανίζει τις παραμέτρους που πέρασε ο χρήστης για διευκόλυνση.
-Αρχικοποίηση Ουράς Εργασιών: Η queue_init() δημιουργεί την κυκλική ουρά εργασιών, με βάση το buffer size που δόθηκε.
-Φόρτωση Αρχικών Συνδέσεων: Η load_sync_config() διαβάζει το αρχείο ρυθμίσεων και για κάθε καταχώρηση δημιουργεί ένα SyncMapping, το 
οποίο αποθηκεύει στη λίστα συγχρονισμού. Επιπλέον, ξεκινά ένα thread το οποίο κάνει LIST τα αρχεία του source client.
-Δημιουργία Κονσόλας: Δημιουργείται ένα thread για την monitor_console_input(), το οποίο ακούει σε TCP σύνδεση και περιμένει 
εντολές από τον χρήστη μέσω του nfs_console.
-Δημιουργία Worker Threads: Γίνεται εκκίνηση n threads τα οποία εκτελούν τη sync_worker_loop() για την εκτέλεση εργασιών PULL και PUSH.
-Join Threads: Ο main thread περιμένει την ολοκλήρωση του console thread, και έπειτα ενώνει τα worker threads.
-Καθαρισμός: Καταστρέφεται η ουρά, κλείνει το αρχείο log και τερματίζεται το πρόγραμμα.


2.nfs_console.c

Το αρχείο nfs_console.c είναι υπεύθυνο για την παροχή μιας διαδραστικής διεπαφής (console interface) προς τον χρήστη, μέσω της οποίας μπορεί να 
στέλνει εντολές στον nfs_manager.

Η κονσόλα λειτουργεί ως TCP client που συνδέεται σε ένα προκαθορισμένο IP/Port όπου "ακούει" ο διαχειριστής (nfs_manager).

Περιγραφή Κύριων Συναρτήσεων:
-main(): Η βασική ροή του προγράμματος. Περιλαμβάνει:
    -Κλήση της parse_arguments() για να γίνει επεξεργασία της γραμμής εντολών (-l, -h, -p).
    -Άνοιγμα του log αρχείου όπου θα καταγράφονται όλες οι εντολές.
    -Κλήση της connect_to_host() για σύνδεση στο nfs_manager.
    -Έναρξη της κύριας συνόδου επικοινωνίας με τη συνάρτηση handle_session().
-parse_arguments(): Επεξεργάζεται τα ορίσματα της γραμμής εντολών και τα αποθηκεύει σε μια δομή Settings. Περιλαμβάνει έλεγχο εγκυρότητας.
-connect_to_host(): Δημιουργεί TCP socket και προσπαθεί να συνδεθεί με τον nfs_manager μέσω της IP και port που του δίνονται.
-read_user_command(): Εμφανίζει prompt (>) και περιμένει από τον χρήστη να εισάγει μια εντολή (π.χ. add, cancel, shutdown).
-append_to_log(): Καταγράφει σε log file την κάθε εντολή του χρήστη μαζί με timestamp.
-handle_session(): Διαχειρίζεται την επικοινωνία με τον manager. Για κάθε εντολή:
    -Την καταγράφει στο log.
    -Τη στέλνει μέσω TCP στο nfs_manager.
    -Περιμένει απάντηση και την εμφανίζει στο τερματικό.

Συνοπτικά:
Η κονσόλα είναι το interface μεταξύ του τελικού χρήστη και του server. Παρέχει απλό περιβάλλον γραμμής εντολών, όπου ο χρήστης μπορεί να διαχειριστεί τα
sync tasks (προσθήκη, ακύρωση, τερματισμός). Έχει ιδιαίτερη σημασία γιατί επιτρέπει δυναμική διαχείριση του συστήματος χωρίς ανάγκη επανεκκίνησης του manager.


3.nfs_client.c

Το αρχείο nfs_client.c υλοποιεί τον client-server κόμβο ο οποίος είναι υπεύθυνος για την ανταλλαγή δεδομένων αρχείων (PULL και PUSH εντολές) είτε ως source είτε ως target.
Η βασική του λειτουργία είναι να παραμένει σε αναμονή, να δέχεται εντολές από τον nfs_manager και να ανταποκρίνεται ανάλογα.
Ο κάθε client (τρέχοντας nfs_client) λειτουργεί είτε ως αποστολέας αρχείων είτε ως δέκτης, ανάλογα με την κατεύθυνση του συγχρονισμού που ορίζεται στη ρύθμιση.

Δομή Κώδικα:
-print_usage()
    -Εμφανίζει μήνυμα χρήσης της εφαρμογής και τερματίζει το πρόγραμμα αν τα επιχειρήματα είναι λανθασμένα.
    -Χρήσιμο σε περιπτώσεις που ο χρήστης ξεχάσει να δώσει το -p <port>.
-create_server_socket(int port)
    -Δημιουργεί έναν TCP server socket στη συγκεκριμένη θύρα (port).
    -Χρησιμοποιεί SO_REUSEADDR για να επιτρέπει την άμεση επαναχρησιμοποίηση του port μετά από επανεκκίνηση.
    -Κάνει bind και listen για εισερχόμενες TCP συνδέσεις.
    -Επιστρέφει το file descriptor του socket.
-handle_client(int client_fd)
    -Αναλαμβάνει την εξυπηρέτηση μιας TCP σύνδεσης από τον nfs_manager.
    -Διαβάζει μια γραμμή (εντολή) με χρήση της socket_read_line().
    -Κάνει parsing της εντολής μέσω της parse_command().
    -Αν είναι έγκυρη, καλεί τη run_command() η οποία εκτελεί μία από τις LIST, PULL ή PUSH πράξεις.
    -Αν η εντολή είναι λανθασμένη, στέλνει μήνυμα σφάλματος πίσω στον manager.
-main()
    -Κάνει parsing των επιχειρημάτων της γραμμής εντολών και επιβεβαιώνει ότι το format είναι σωστό (-p <port>).
    -Καλεί τη create_server_socket() για να ξεκινήσει η λειτουργία του ως server.
    -Γράφει μήνυμα εκκίνησης στο stdout για επιβεβαίωση.
    -Εκτελεί έναν ατέρμονο βρόχο while(1):
        -Δέχεται νέες συνδέσεις από clients μέσω accept().
        -Κάθε σύνδεση εξυπηρετείται μέσω της handle_client().
        -Κλείνει το socket μετά την ολοκλήρωση.

Πώς ενσωματώνεται στο σύστημα:
-Όταν ο nfs_manager θέλει να ξεκινήσει ένα συγχρονισμό αρχείου, δημιουργεί μια TCP σύνδεση προς τον nfs_client στο source host (για PULL) και σε δεύτερο βήμα
στο target host (για PUSH).
-Το nfs_client τρέχει συνεχώς στο παρασκήνιο σε κάθε υπολογιστή και περιμένει τέτοιες συνδέσεις για να εξυπηρετήσει τις αντίστοιχες εντολές.
-Είναι πλήρως παθητικό: δεν ξεκινά δικές του ενέργειες αλλά ανταποκρίνεται σε εντολές του manager.

Σχέση με άλλα modules:
-Εξαρτάται από το command_exec.h το οποίο περιέχει τον μηχανισμό parsing εντολών και εκτέλεσης των LIST, PULL, PUSH.
-Είναι ανεξάρτητο από τα worker_jobs ή manager_core, λειτουργεί μόνο ως εκτελεστική μονάδα δεδομένων.

Τεχνικές Παρατηρήσεις:
-Δεν δημιουργεί δικά του threads: όλα γίνονται σειριακά, σύνδεση → εξυπηρέτηση → κλείσιμο.
-Ο manager μπορεί να κάνει ταυτόχρονες συνδέσεις αν χρειαστεί να συγχρονίσει πολλά αρχεία ταυτόχρονα (π.χ. με πολλούς worker threads).


4.utils.c

Το αρχείο utils.c υλοποιεί χρηστικές βοηθητικές συναρτήσεις και βασικές δομές δεδομένων που χρησιμοποιούνται σε όλο το project, κυρίως από τα αρχεία 
nfs_manager.c και worker_jobs.c. Περιέχει:
    -Την υλοποίηση μιας κυκλικής ουράς εργασιών (job queue) με προστασία μέσω mutexes και condition variables.
    -Λειτουργίες διαχείρισης χρόνου.
    -Τυπικές συναρτήσεις βοηθητικής φύσεως.

Πυρήνας: Ουρά Εργασιών (Queue)
Η Queue είναι μια κυκλική ουρά σταθερού μεγέθους (capacity) που εξυπηρετεί το παραγωγός–καταναλωτής μοτίβο:
    -Παραγωγός: η init_sync_request() από τον manager δημιουργεί jobs και τα βάζει στην ουρά.
    -Καταναλωτής: οι sync_worker_loop() workers παίρνουν jobs από την ουρά και τα επεξεργάζονται.

Δομή Queue
typedef struct {
    Job *items;
    int head, tail, size, capacity;
    pthread_mutex_t mutex;
    pthread_cond_t not_full, not_empty;
} Queue;

-items: πίνακας με jobs
-head: δείκτης στο επόμενο job για κατανάλωση
-tail: δείκτης όπου θα τοποθετηθεί το επόμενο νέο job
-size: πόσα στοιχεία έχει τώρα
-capacity: μέγιστο πλήθος
-mutex, not_full, not_empty: synchronization primitives

Συναρτήσεις Ουράς:
-void queue_init(Queue *q, int capacity)
    -Αρχικοποιεί μια ουρά με συγκεκριμένη χωρητικότητα. Δεσμεύει μνήμη και αρχικοποιεί mutex/conditions.
-void queue_destroy(Queue *q)
    -Αποδεσμεύει μνήμη και καταστρέφει τα synchronization primitives.
-void queue_push(Queue *q, const Job *job)
    -Εισάγει ένα νέο job στην ουρά:
        -Περιμένει (pthread_cond_wait) αν η ουρά είναι γεμάτη.
        -Γίνεται ασφαλές memcpy() στο tail.
        -Σηματοδοτεί τους καταναλωτές ότι υπάρχει διαθέσιμη εργασία.
-void queue_pop(Queue *q, Job *job)
    -Αφαιρεί job από την ουρά:
        -Περιμένει αν η ουρά είναι άδεια.
        -Αντιγράφει το job από το head.
        -Ενημερώνει το tail και μειώνει το size.
        -Σηματοδοτεί παραγωγούς (not_full).


5.manager_core.c

Το αρχείο manager_core.c υλοποιεί τη λογική ερμηνείας εντολών του συστήματος και τη διαχείριση συγχρονιστικών mappings ανάμεσα σε source και target clients.
Περιλαμβάνει επίσης την υλοποίηση της λειτουργίας που τρέχει στο console thread, καθώς και τον μηχανισμό αρχικής φόρτωσης συγχρονισμών από το αρχείο ρυθμίσεων.

Κύριες Λειτουργίες του Αρχείου:
-Διαχείριση λίστας συγχρονισμού (sync list)
-Διαχείριση και απάντηση σε εντολές της κονσόλας
-Πρώτη αποστολή LIST και γέμισμα της ουράς
-Φόρτωση αρχείου ρυθμίσεων (config file)
-Αρχικοποίηση εργασιών μέσω init_sync_request()

Δομή SyncMapping
-Χρησιμοποιείται για να οργανώνονται και να αποθηκεύονται οι τρέχοντες ενεργοί συγχρονισμοί.
-Υπάρχει μια global λίστα mapping_list_head και ένα mutex mapping_list_mutex για συγχρονισμένη πρόσβαση.

Κύριες Συναρτήσεις & Περιγραφή
-void *monitor_console_input(void *arg)
    -Τρέχει σε ξεχωριστό thread.
    -Ανοίγει TCP socket στην πόρτα port, όπου ακούει για εντολές από την κονσόλα.
    -Για κάθε εντολή που λαμβάνει από client (nfs_console), την ερμηνεύει και την προωθεί προς εκτέλεση.
    -Υποστηριζόμενες εντολές:
        -add source target
        -cancel source
        -shutdown
    -Είναι η βασική διεπαφή ανάμεσα σε manager και κονσόλα.
-void *init_sync_request(void *arg)
    -Παίρνει ως είσοδο έναν SyncMapping.
    -Συνδέεται στο source client.
    -Στέλνει εντολή LIST <path> για να πάρει όλα τα αρχεία.
    -Για κάθε αρχείο δημιουργεί Job και το βάζει στην job_queue.
    -Ουσιαστικά ξεκινάει τον πρώτο συγχρονισμό.
-void load_sync_config(const char *filename)
    -Διαβάζει το αρχείο ρυθμίσεων (config_nfs.cfg).
    -Για κάθε γραμμή, δημιουργεί ένα SyncMapping.
    -Αν δεν υπάρχει ήδη αυτός ο συγχρονισμός, τον προσθέτει στη λίστα.
    -Δημιουργεί thread με init_sync_request() για κάθε νέο mapping.
    -Χρήσιμο για αυτόματη εκκίνηση συγχρονισμών κατά το boot του συστήματος.
-void show_usage(const char *program_name)
    -Εκτυπώνει οδηγίες για την ορθή χρήση του nfs_manager.
-static Command parse_command(const char *line)
    -Δέχεται string εντολής (π.χ. add path1 path2).
    -Αναγνωρίζει αν είναι add, cancel, ή shutdown.
    -Επιστρέφει δομή Command με τύπο και παραμέτρους.
-static void respond_cancel(...)
    -Εντολή από κονσόλα: cancel.
    -Ψάχνει στη λίστα των mappings και αφαιρεί τον αντίστοιχο.
    -Δεν επηρεάζει άμεσα τους workers, απλώς σταματά την "πηγή".
-static void respond_shutdown(...)
    -Τερματίζει ολόκληρο το σύστημα:
        -Ορίζει is_terminating = 1
        -Ξυπνάει όλα τα worker threads μέσω pthread_cond_broadcast.
        -Κλείνει client/manager sockets και καλεί pthread_exit().

Ροή εκτέλεσης
-Ο manager ξεκινά, φορτώνει ρυθμίσεις και δημιουργεί συγχρονισμούς.
-Περιμένει εντολές από την κονσόλα (monitor_console_input).
-Ανάλογα με την εντολή:
    -Προσθέτει νέο mapping → νέο sync → νέα jobs.
    -Ακυρώνει ένα mapping.
    -Τερματίζει το σύστημα.


6.worker_jobs.c

Το αρχείο worker_jobs.c υλοποιεί τον μηχανισμό των worker threads, δηλαδή των νημάτων που εκτελούν τις πραγματικές εργασίες συγχρονισμού.
Κάθε worker είναι υπεύθυνος για:
    -Να τραβήξει (pull) ένα αρχείο από έναν source client.
    -Να το προωθήσει (push) σε έναν target client.
    -Να καταγράψει το αποτέλεσμα στο αρχείο καταγραφής (log_file).

Κεντρική Συνάρτηση: sync_worker_loop()
    -Αυτή είναι η βασική συνάρτηση που εκτελείται από κάθε worker thread.

    -Αναλυτική Λειτουργία:
    1.Αναμονή για εργασία:
        -Ο worker περιμένει στη job_queue μέχρι να υπάρχει διαθέσιμη εργασία ή να τερματίζει το σύστημα (is_terminating).
        -Ο μηχανισμός pthread_cond_wait() μπλοκάρει τον worker αποδοτικά μέχρι να ειδοποιηθεί.
    2.Ανάκτηση Job:
        -Η εργασία ανακτάται από την κυκλική ουρά.
        -Γίνεται αντιγραφή (memcpy) ώστε να μην διαβάζει shared δεδομένα.
    3.Εκτέλεση εργασίας (process_job):
        -Ο worker καλεί τη process_job(), η οποία περιλαμβάνει:
            -pull: Λήψη του αρχείου από τον source.
            -push: Αποστολή του αρχείου στον target.
    4.Καταγραφή αποτελέσματος:
        -Μετά από κάθε ενέργεια (PULL ή PUSH) καταγράφεται σχετικό μήνυμα στο αρχείο καταγραφής (log_file), μαζί με timestamp.

Δομή Job

Η κάθε εργασία αναπαρίσταται από μία δομή Job (ορίζεται στο utils.h). Περιλαμβάνει:
    -Όνομα αρχείου.
    -Πλήρη στοιχεία source: path, IP, port.
    -Πλήρη στοιχεία target: path, IP, port.

Βοηθητικές Συναρτήσεις
-connect_to(const char *ip, int port)
    -Δημιουργεί TCP σύνδεση με IP και πόρτα που του δίνεται.
    -Επιστρέφει file descriptor του socket ή -1 αν αποτύχει.
-pull(const Job *job, int *fd_out, long *size_out)
    -Συνδέεται με τον source client.
    -Στέλνει εντολή PULL <path>.
    -Λαμβάνει το μέγεθος του αρχείου και επιστρέφει socket μέσω του οποίου το διαβάζει.
-push(const Job *job, int fd, long size)
    -Συνδέεται με τον target client.
    -Στέλνει εντολή PUSH σε κομμάτια:
        -Μήνυμα PUSH <path> -1 start: Έναρξη.
        -Πολλαπλά PUSH <path> <len> <data> για περιεχόμενο.
        -Τέλος: PUSH <path> 0 done.
-log_result(...)
    -Καταγράφει τη δραστηριότητα (PULL, PUSH) στο log.
    -Περιλαμβάνει:
        -Timestamp.
        -Πηγή και προορισμό.
        -Αποτέλεσμα (OK / FAIL).
        -Μήνυμα κατάστασης.
-make_path(...)
    -Δημιουργεί πλήρη αναπαράσταση της μορφής:
        -dir/filename@ip:port
    Για λόγους ευανάγνωστης καταγραφής.
-get_file_info(...)
    -Διαβάζει την αρχική πληροφορία από τον source client για το μέγεθος του αρχείου.
    -Κάνει parsing και επιστρέφει μέγεθος.


7.command_exec.c

Το αρχείο command_exec.c περιέχει την υλοποίηση της επεξεργασίας εντολών που δέχεται ο nfs_client. Ουσιαστικά, είναι ο “διερμηνέας” των εντολών LIST, PULL και 
PUSH που αποστέλλονται από τον nfs_manager.
Αυτό το αρχείο χρησιμοποιείται αποκλειστικά από το nfs_client.c, και προσφέρει διαχωρισμό ευθυνών: ο client χειρίζεται συνδέσεις, ενώ το command_exec.c χειρίζεται 
τις επιμέρους εντολές που του έρχονται.

Βασική Δομή
-Αποτελείται από δύο κύρια μέρη:
    1.Εκτέλεση εντολών (exec_list, exec_pull, exec_push)
    2.Αντιστοίχιση/Parsing εντολών (parse_command, run_command)

Λειτουργικές Συναρτήσεις
-exec_list(int fd, const char *path)
    -Ανοίγει τον κατάλογο path στον τοπικό δίσκο.
    -Επιστρέφει στο socket fd όλα τα αρχεία που περιέχει (μόνο αρχεία, όχι φακέλους).
    -Τερματίζει την απάντηση με .\n.
-exec_pull(int fd, const char *path)
    -Ανοίγει ένα αρχείο προς ανάγνωση.
    -Υπολογίζει το μέγεθός του (lseek).
    -Στέλνει:
        1.Το μέγεθος του αρχείου.
        2.Τα περιεχόμενα του αρχείου σε chunks.
    -Χρησιμοποιείται όταν ο manager θέλει να τραβήξει ένα αρχείο από τον source.
-exec_push(int fd, const char *path, int len, const char *chunk)
    -Υποστηρίζει σταδιακή εγγραφή ενός αρχείου από τον manager.
    -Περιλαμβάνει 3 περιπτώσεις:
        -len == -1: Δημιουργία/άνοιγμα νέου αρχείου ("w").
        -len == 0: Κλείσιμο του αρχείου.
        -len > 0: Γράφει το chunk στο αρχείο (append).
    -Χρησιμοποιείται για να σπρώξει ο manager δεδομένα στον target client.
    -Χρησιμοποιεί στατικό δείκτη FILE *f για να διατηρεί context ανά κλήση. Κάθε εντολή push σχετίζεται με μια συνέχεια από start, data, done.

Parsing Εντολών
-parse_command(char *text, Command *cmd)
    -Διαβάζει την εισερχόμενη εντολή ως string και γεμίζει την δομή Command.
    -Υποστηρίζει:
        -LIST <path>
        -PULL <path>
        -PUSH <path> <len> <data>
    -Η Command περιέχει:
        -type: "LIST", "PULL", "PUSH"
        -arg1: π.χ. path αρχείου
        -chunk_size: μέγεθος chunk (μόνο για PUSH)
        -data: δυναμικά δεσμευμένος buffer (για PUSH)

Άλλες Βοηθητικές
-cleanup_string(char *text)
    -Αφαιρεί τυχόν newline/CR χαρακτήρες στο τέλος του string για ασφαλές parsing.
-socket_read_line(int sock, char *buf, int max_len)
    -Διαβάζει γραμμή-γραμμή από socket μέχρι να φτάσει newline ή γεμίσει το buffer.